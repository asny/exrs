[package]
name = "exr"
description = "Read and write OpenEXR files without any unsafe code"
keywords = ["exr", "openexr", "file", "binary", "io"]
categories = ["encoding", "filesystem", "graphics", "multimedia"]

version = "1.1.0"
edition = "2018"
authors = ["johannesvollmer <johannes596@t-online.de>"]

repository = "https://github.com/johannesvollmer/exrs"
readme = "README.md"
license-file = "LICENSE.md"
exclude = [ "specification/*", "specification/**", "tests/images/*", "tests/images/**" ]

[badges]
maintenance = { status = "actively-developed" }

[lib]
path = "src/lib.rs"
test = true
doctest = true
bench = true
doc = true
plugin = false
proc-macro = false

[dependencies]
lebe = "0.5.1"        # generic binary serialization
half = "1.6.0"        # 16 bit float pixel data type
bit_field = "0.10.0"  # exr file version bit flags
deflate = "0.8.4"     # DEFLATE compression
inflate = "0.4.5"     # DEFLATE decompression
smallvec = "1.3.0"    # make cache-friendly allocations             TODO profile if smallvec is really an improvement!
rayon = "1.3.0"       # multi-core for compression and decompression     TODO make this an optional feature?

# generate meta data to_string
serde = { version = "1.0.125", optional = true, features=["derive"] }

[dev-dependencies]
bencher = "0.1.5"
image = "0.23.4"          # used to convert one exr to some pngs
walkdir = "2.3.1"         # automatically test things for all files in a directory
rand = "0.7.3"            # used for fuzz testing

# generate meta data to_string to json in an example
serde_json = "1.0.64"

[features]
serialize-meta-data = [ "serde", "smallvec/serde" ]

[[bench]]
name = "read"
harness = false

[[bench]]
name = "profiling"
harness = false

[[bench]]
name = "write"
harness = false



# test with fast runtime speed and moderate build speed
[profile.dev]
opt-level = 3
debug = true

# release with fastest runtime speed
[profile.release]
opt-level = 3
lto = true
debug = false
codegen-units = 1

# test with fast runtime speed and moderate build speed
[profile.test]
opt-level = 0 # TODO use level 3 and "-C debug-assertions" to enable assertions
debug = true

# bench with fastest runtime speed
[profile.bench]
opt-level = 3
lto = true
debug = true
codegen-units = 1

[[example]]
name = "0_read_meta"
required-features = ["serialize-meta-data"]
